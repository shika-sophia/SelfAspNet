#region -> MailKit API 〔NT 122 App1-〕
/*
 *@require VS [Menu] -> [Project] -> [NuGet] -> "MailKit" install
 *
 *@class   ==== MainMailKitSample.cs ====
 *@subject MailKitクラス 〔NT 122 App1-5〕
 *         MailKit.Net.Smtp.SmtpClient smtp =
 *              new MailKit.Net.Smtp.SmtpClient()
 *         void smtp.Connect(string host, [int port], 
 *             [MailKit.Security.SecureSocketOptions])
 *                SecureSocketOptions.Auto
 *                SecureSocketOptions.SslOnConnect SMTPS (SSL通信)
 *                SecureSocketOptions.StartTls     STARTTLS (SSL通信)
 *         void smtp.Autenticate(string id, string password)
 *         void smtp.Send(MimeKit.MimeMessage)
 *         void smtp.Disconnect(bool quit)
 *         void smtp.Dispose()
 *         
 *@subject MimeKitクラス
 *         MimeKit.MimeMessage mail =
 *             new MimeKit.MimeMessage()
 *         MimeKit.MailboxAddress : InternetAddress
 *             new MailboxAddress(string name, string address)
 *             ※ alias(=エイリアス 別名)を利用は nameに設定
 *             
 *         MimeKit.InternetAddressList mail.From
 *         MimeKit.InternetAddressList mail.To
 *         void   mail.From.Add(MimeKit.InternetAddress)
 *         void   mail.To.Add(MimeKit.InternetAddress)
 *         string mail.Subject
 *         MimeKit.MimeEntity
 *                mail.Body = builder.ToMessgaeBody()
 *                
 *@subject BodyBuilder
 *         MimeKit.BodyBuilder builder =
 *             new MimeKit.BodyBuilder()
 *         string builder.TextBody
 *         string builder.HtmlBody
 *         MimeKit.MimeEntity builder.ToMessgaeBody()
 *         
 *@class   ==== MailKitEncodingSample.cs ====
 *@subject System.Text.Encoding
 *         Encoding Encoding.GetEncoding(string)
 *         Encoding Encoding.UTF8 //MimeKit デフォルト
 *
 *@subject MimeKitクラス
 *         MimeKit.HeaderList mail.Headers
 *         void headers.Add(MimeKit.HeaderId, string)
 *         void headers.Replace(MimeKit.HeaderId, Encoding, string)
 *             enum MimeKit.HeaderId
 *             int? MimeKit.HeaderId.Subject = 113
 *             
 *         ※ MimeKitMessageクラスのインスタンス生成時に
 *            Subjectヘッダーが生成されるので、
 *            Add()をすると二重にSubjectが生成される。
 *            Replace()で Encodingと 代替文字列を指定して置換すべき
 *            
 *@subject MimeKit.TextPartクラス
 *         MimeKit.TextPart textPart =
 *             new MimeKit.TextPart(string subtype) "plain" | "html"
 *         void textPart.SetText(Encoding, string text)
 *         MimeKit.ConnectEncoding
 *              textPart.ContentTransferEncoding 送信時の文字コード？
 *                  ContentEncoding.Default
 *                  ContentEncoding.Binary
 *                  ContentEncoding.SevenBit | EightBit
 *                  ContentEncoding.Base64  //暗号コード Base64 など
 *                  
 *@class   ==== MimeKitAttachmentSample.cs ====
 *@subject MimeKit.MimePartクラス : MimeEntity
 *         MimeKit.MimePart attach = 
 *             new MimeKit.MimePart(string contentType) 
 *               "image/jpeg" | "image/png" | "image/gif"
 *               "audio/mp4" | "video/mpeg" | "applicattion/pdf" など
 *               string MimeKit.MimeTypes.GetMimeType(filePath) 
 *                         pathのファイル拡張子から MIMEタイプ文字列を取得
 *                         =>〔Reference_MailKit / MailKit_CsharpMailSend.txt〕
 *
 *         MimeKit.IMimeContent attach.Content =
 *         MimeKit.MimeKitContent 
 *             new MimeKit.MimeContent(Stream, [Encoging])
 *                   Stream 〔CS33 ReadStream, CS36 File〕
 *                     FileStream File.OpenRead(string path)
 *                  [Encoding]
 *                     encoding = MimeKit.ContentEncoding.Default
 *         attach.ContentDisposition =
 *             new MimeKit.ContentDisposition();
 *         string attach.FileName = Path.GetFileName(string path)
 *         MimeKit.ContentEncoding attach.ContentTransferEncoding 〔上記〕
 *
 *@subject MimeKit.Multipart : MimeEntity
 *         MimeKit.Multipart multi = 
 *             new MimeKit.Multipart(string subtype); //"mixed"など
 *         void multi.Add(MimeKit.MimeEntity)
 *
 *@subject ＊ポート25, 587, 465の違い
 *         メールを送信する時のSMTPのポート番号には、
 *         25, 587, 465のいずれかを使用します。
 *         ポート番号毎の用途について、以下にまとめました。
 *
 *         ・25番
 *         特定のネットワークアドレス(社内など)からから認証なしで送信する用途に使われる。
 *         メールの暗号化を行わない為、通常の用途では使用しない。
 *
 *         ・587番
 *         一般的に、認証に成功した場合のみ送信を許可。
 *         暗号化にはSTARTTLSを使用。
 *
 *         ・465番
 *         認証に成功した場合のみ送信を許可。
 *         暗号化にはSMTPS(over SSL)を使用。
 */
#endregion