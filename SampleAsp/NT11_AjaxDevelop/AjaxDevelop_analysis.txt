/*
 * @title SelfAspNet / SampleAsp / NT11_AjaxDevelop / AjaxDevelop_analysis.txt
 *
 */

 /**
 *@title SelfAspNet / SampleAsp / NT11_AjaxDevelop / 
 *       AjaxExtentionsDiv / AjaxUpdatePanelSample.aspx.cs
 *@target AjaxUpdatePanelSample.aspx
 *@based  NT04_DataBindControl / GridViewSample.aspx
 *source  SelfAspDB / Album_tb
 *@reference  NT 山田祥寛『独習 ASP.NET 第６版』翔泳社, 2020
 *@content NT 第11章 Ajax開発 / 11.2 AJAX Extentions / p572
 *         ■ ASP.NET AJAX Extentions 
 *         ・Ajaxの定型的な基本機能を ASP.NETに導入するためのコントロール
 *         ・ASP.NET プロジェクトは、デフォルトで 
 *           VSツールボックス内 [AJAX Extentions]項目に用意されている。
 *           (特別なインストールをしなくても利用可)
 *         
 *         ◆AJAX Extentions コントロール
 *         ScriptManager  JavaScriptの解析に必要なコントロール
 *         ScriptManagerProxy 〔下記〕
 *         UpdatePanel    部分的な更新を可能にする
 *         UpdateProgress 非同期通信中の「通信中」メッセージ・進捗状況の表示
 *         Timer          一定時間の間隔で実行するスケジュール機能
 *
 *@subject ScriptManager コントロール
 *         ・AJAX Extentionsに限らず、JavaScriptを扱う場合は
 *           各ページに１つ必ず必要。
 *         ・マスターページを利用する場合は マスターページに記述
 *           各ページには不要。(複数不可)
 *         ・ScriptManagerProxy:
 *           マスターページに ScriptManagerを記述し、
 *           各ページから、ScriptManagerにアクセスする必要がある場合
 *           各ページには ScriptManagerProxyを用いる。proxy [英] 代理。
 *         
 *@subject UpatePanel コントロール
 *         ・部分的な更新を定義するコントロール
 *         ・利用できないコントロール
 *         × TreeView, Menu, FileUpload, HtmlInputFile
 *         × (GridView) EnableSortingAndPagingCallbacks="True"のみ
 *         ・Requestデータが部分化されているわけではないことに注意
 *           ViewStateは、毎回ページ全体のデータがサーバーに送られている。
 *           
 *         ・<asp:UpdatePanel>
 *             └ <ContentTemplate> 部分的な更新を行う サーバーコントロール / DataSourceコントロールを配置
 *             |                   配下のコントロールでポストバックが発生すると更新
 *             └ <Triggers>        ポストバック・イベントを指定して更新
 *             |   └ <asp:AsyncPostBack> 非同期ポストバック(= Ajax通信) のイベント 
 *             |        └ ControlID="" 更新するコントロール名
 *             |        └ EventName="" トリガーとなるイベント名
 *             |             Tick | Init | Load | Unload | PreRender
 *             |             | DataBinding | Dispose
 *             |
 *             └ UpdateMode=""    Always (=常時) | Conditional (=条件下) 
 *                                UpdatePanelをネストした場合の挙動
 *                                ・親 Conditinal + 親 ポストバック => 両方更新
 *                                ・親 Conditinal + 子 ポストバック => 子のみ更新
 *                                ・UpdateMode="" に関係なく 子は必ず更新
 *
 *@subject UpdateProgressコントロール
 *         ・非同期通信中の「通信中」メッセージ, 進捗状況の表示。
 *         
 *         <asp:UpadataProgress>
 *           └ <ProgressTemplate>内 Label, Imageなど表示系コントロールを配置
 *           └ AssociatedUpdatePanel="" デフォルト: 全ての UpdatePanel
 *           └ DisplayAfter=""          非同期通信の何ミリ秒後に表示するか / デフォルト: 500
 *           |                          ※ 0: 即時表示。 短時間で処理が完了すると画面のチラつきに見えるので注意
 *           └ DynamicLayout=""         通信メッセージを動的にレイアウトするか / デフォルト: true
 *         
 *@subject Timer コントロール
 *         ・<asp:UpdatePanel>内 <Triggers>
 *             <asp:AsyncPostBackTrigger> 非同期ポストバック(= Ajax通信) のイベント 
 *               ContrrolID="" 更新するコントロール
 *               EventName=""  トリガーとなるイベント
 *         ・<asp:Timer> Interval=""
 *         
 *         ・「.aspx.cs」イベントハンドラー
 *           xxxx.DataBind() 必須 / xxxx: 更新するコントロールのID
 *           
 *           ※GridViewなどデータバインドコントロールは Page_Load()時に
 *           自動的にデータバインドが行われるが、
 *           UpdatePanlの部分更新の領域は自動でバインドされない。
 *           <asp:Timer>利用時には必ず明示的に xxxx.DataBind()をしないと
 *           自動更新は表示されない。
 *           
 *           ※ViewStateMode="Disable"なら、明示的に xxxx.DataBind()をしなくても
 *           自動更新される。
 *           
 *@NOTE【実行】AjaxUpdatePanelSample.aspx
 *      Grid内のソート (= 項目行のリンクをクリック)
 *      -> ソートにより順序変化
 *      -> Page Loaded: 更新日時に変化はないことを確認済
 *      
 *@NOTE【実行】UpdateProgressを追加
 *      ソート時に 通信中の「.gif」が表示されるかを確認
 *      =>〔AjaxUpdatePanel_withUpdateProgress.jpg〕
 *      
 *@NOTE【実行】Timerを追加
 *      実行中は サーバーエクスプローラが開いていないため、
 *      実行中に右メニュー欄の ソリューションエクスプローラを開き、
 *      「App_Data / SelfAspDB.mdf」から サーバーエクスプローラを開く。
 *      Album_tb -> [新しいクエリ] -> UPDATE文実行
 *      
 *      -- NT11_AjaxDevelop / AjaxExtentions / AjaxUpdatePanel.aspx
 *      -- Timer更新のテストのため、Album_tbデータを変更
 *      UPDATE Album 
 *        SET comment=N'ピアノ部屋。毎日練習しています。バッハが好きです。'
 *        WHERE Id='S0003';
 *      =>〔SampleSql / Album_tb.sql〕
 *        
 *      DB変更後に 自動更新されるかを確認済。10秒おきにチェックしている。
 *      (Page Loaded: 更新日時には変更なし -> 部分的に更新されているから)
 */

 /** <!--
 *@title SelfAspNet / SampleAsp / NT11_AjaxDevelop
 *       jQueryDiv / jQuerySample.aspx.cs
 *@target jQuerySample.aspx
 *@source https://wings.msn.to/books/{0}/{0}_logo.jpg | {0}: isbn
 *
 *@reference 山田祥寛『独習 ASP.NET 第６版』翔泳社, 2020
 *@content jQueryの利用
 *
 *@prepare 事前にインストールが必要だが、ValidatorControlで実行済
 *@prepare jQueryをインストール
 *         PM> Install jquery
 *         -> 「~/Scripts」に jquery-x.x.x.xxx.js 
 *         => 〔NT03_ServerControl / ValidSample.aspx.cs〕
 *         
 *@prepare 「Global.asax」Application_Start()
 *          => jQueryの保存場所を登録 〔同上 | p100 | NT20〕
 *
 *@subject ScriptManager
 *         ・JavaScriptを扱う場合は必須で配置
 *         ・CDN: Contents Delivery Network
 *                ライブラリ, CSS(=スタイルシート), 画像リソースなど
 *                コンテンツ配信に特化したネットワーク。
 *                特別な準備は不要で、レスポンスに優れるので優先的に利用。
 *         
 *         ＊階層
 *         <asp:ScriptManager>
 *           └ EnableCdn=""         CDNを利用するか / True* | False / *: デフォルト
 *           └ AjaxFrameworkMode="" Enabled* | Disabled | Explicit(=明示的)
 *           |                      ASP.NET AJAX関連のコードをダウンロードするか
 *           |
 *           └ <Scripts>            includeするスクリプト
 *              └ <asp:ScriptReference>
 *                 └ Name=""        「Global.asax」に登録したスクリプト名: jquery
 *         
 *         ＊例「.aspx」
 *         <asp:ScriptManager ID="ScriptManager1" runat="server"
 *             AjaxFrameworkMode="Disabled"
 *             EnableCdn="True">
 *             <Scripts>
 *               <asp:ScriptReference Name="jquery" />
 *             </Scripts>
 *         </asp:ScriptManager>
 *   
 *@subject セレクター関数 (×ここだけの名前)
 *         $( ... ) 引数を jQueryオブジェクトに変換
 *         
 *@subject セレクター記法
 *         $('xxxx')        HTML要素
 *         $('#id')         id="id"
 *         $('.clazz')      class="clazz"
 *         $('A B')         要素A 配下の すべての要素B
 *         $('A > B')       要素A 直下の すべての要素B
 *         $('[key = value]')     属性 key 値 valueのすべての要素
 *         $('xxx [key = value]') 属性 key 値 valueのすべてのxxx要素
 *         $('<li>リスト項目</li>').appendTo('ul')
 *                          HTML文字列をセレクタにすることも可
 *         $(document.body) JavaScript標準オブジェクト。「'」なし
 *           例: $(document.body).css("background-color", "lavender");
 *         
 *@subject 匿名関数
 *         ・jQueryの構文はすべてこの function内に記述
 *         ・すべてのページ読取完了後に処理される
 *           (function内の <div>などのHTMLタグは function実行時に読み取れない)
 *         
 *         ＊構文
 *         <script>
 *         $(function(){
 *           //処理内容
 *         });
 *         </script>
 *         
 *         ＊例「.aspx」
 *         <script>
 *         $(function(){
 *           $('#menu img.other'.fadeOut(5000);
 *         });
 *         </script>
 *
 *@subject jQueryメソッド 
 *         ・戻り値: ほぼ jQueryオブジェクト
 *         ・データ型は JavaScriptで厳密ではないが、ここではC#のデータ型で表記しておく
 *         ・メソッドチェーン: 戻り値は ほぼ jQueryオブジェクトなので連結処理可
 *         ・繰り返し処理: 対象オブジェクトが複数ある場合、すべての要素にメソッド処理を行う
 *                        (foreachしなくても繰り返し処理)
 *                        
 *         ＊attribute 属性
 *         $( ).attr(string name, [T value]) 属性名 nameに 値valを設定 
 *                                           属性名 nameのみなら 値取得
 *             .removeAttr(name)             属性名 nameを削除
 *             .addClass(string clazz)       class="clazz"を追加
 *             .removeClass(clazz)           class="clazz"を削除
 *             .toggleClass(clazz)           class="clazz"がなければ追加 / あれば削除
 *             .css(string name, [string value]) style="name : value" / nameのみなら値取得
 *              
 *         ＊element 要素
 *         $( ).html(string)   要素本体 <xxxx>本体</xxxx> に HTML文字列を追加
 *             .text(string)   要素本体にプレーンテキストを追加 (HTML予約文字はエスケープ処理)
 *         $(親).append(子)    親要素の子要素末尾に引数要素を追加
 *         $(子).appendTo(親)  引数の親要素の末尾に 対象オブジェクトの子要素を追加
 *             .prepend(要素c) 要素cを 子要素先頭に追加
 *             .after(c)       要素cを 後方に追加
 *             .before(c)      要素cを 前方に追加
 *             .replaceWith(c) 要素cを 対象オブジェクトの要素と置換
 *             .empty()        対象オブジェクト配下のすべての子要素を削除
 *             
 *         ＊effect 効果 / dur: duration 時間間隔(ミリ秒)
 *         $( ).show(long? dur) 非表示状態 -> 表示状態
 *             .hide(dur)       表示状態 -> 非表示状態
 *             .toggle(dur)     表示状態 -> 非表示状態 / 非表示状態 -> 表示状態
 *             .slideDown(dur)  スライドダウン (=縮小していく)
 *             .slideUp(dur)    スライドアップ (=拡大していく)
 *             .fadeIn(dur)     フェイドイン  (=だんだん濃くなる)
 *             .fadeOut(dur)    フェイドアウト(=だんだん薄くなる)
 *             
 *@subject メソッドチェーン
 *         ・メソッドの戻り値は ほぼ jQueryオブジェクトなので、
 *           メソッドを連結して処理可能
 *         
 *         $('#menu img.other')
 *              .fadeOut(5000)
 *              .fadeIn(5000)
 *              .slideUp(5000);
 *
 *@subject イベント関数 (×ここだけの名前)
 *         ＊構文
 *         $('要素名').イベント名(function () {
 *             $(this).メソッド(引数);
 *         });
 *         
 *         $(this): イベント発生元の要素オブジェクトを表す = $('要素名')
 *                  $( )で jQueryオブジェクトに変換しないと、jQueryメソッドは利用できない
 *         
 *         ＊例「.aspx」
 *         $('img').click(function () {
 *             $(this).fadeToggle(5000);
 *         });
 *         
 *@subject jQueryのイベント
 *         ＊マウス
 *         click      クリック時
 *         dbclick    ダブルクリック時
 *         mousemove  要素の中をマウスポインタが移動したとき
 *         mouseover  要素にマウスポインタが乗ったとき
 *         mouseout   要素にマウスポインタが外れたとき
 *         mouseup    マウスボタンを押したとき
 *         
 *         ＊key
 *         keydown    keyを押したとき
 *         keypress   keyを押し続けているとき
 *         keyup      keyを離したとき
 *         
 *         ＊focus
 *         focusin  マウスや|Tab|でフォーカスしたとき
 *         focusout マウスや|Tab|でフォーカスが外れたとき
 *         
 *         ＊form
 *         blur     要素からフォーカスを外したとき
 *         change   要素の値を変更したとき <input> <select> <textarea>など
 *         focus    要素にフォーカスされたとき
 *         select   クリックやカーソル移動でテキストを選択したとき <input> <textarea>
 *         submit   <form>送信したとき
 *         
 *         ＊others
 *         resize   ウィンドウのサイズを変更したとき
 *         scroll   ページ要素をスクロールしたとき
 *         unload   ページをアンロードしたとき
 *         
 *@see jQuerySample_withFadeout.jpg
 *@see jQuerySample_withSlideDown.jpg
 *@copyTo AjaxDevelop_analysis.txt
 *@author shika
 *@date 2022-05-29, 05-30
 * -->
 */